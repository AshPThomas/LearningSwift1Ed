== Mac App

. Create a new Workspace in Xcode (File -> New -> Workspace)

. Save as Notes.xcworkspace

. File -> New  -> Project, OS X -> Application, Cocoa Application
+
Product name: Notes, Language: Swift, Org. name and identifier: whatever you like, Create Document-Based Application = on, Use Core Data = off, include unit and UI tests = both on
+
When saving it, change 'Add to' to the 'Notes' workspace that you just created

[NOTE]
====
UI tests will only work on OS X 10.11 'El Capitan'.
====

. Run the app and you can already create new 'documents' by pressing Cmd-N.

=== The document model

. Open Document.swift
. Add an NSAttributedString property called +text+ - set its default value to the empty attributed string

. Implement +dataOfType+ to convert the string to an NSData containing RTFD and return it (or throw an error)
. Implement +readFromData+ to convert the NSData into an NSAttributedString or throw an error

. Run the app, you can now save and open files - the UI doesn't change yet, we'll do that next

==== A basic UI

. Open Document.xib

. Delete the label

. Add a text view, resize it to fill the window (leaving some margins)
. Select it
. Editor->Resolve Auto Layout Issues->Reset to Suggested Constraints
	. Text view will now resize to fit the window
. Select the Text View (it's a child of the Bordered Scroll View's Clip View)
. Open Bindings inspector
	. Bind Attributed String to File's Owner; model key path = self.text
	
. Run the app; you can now enter and save text, close the document, re-open it; you get free undo and revision control; LOTS of stuff is taken care of for you!

==== Architecting for attachments

. Right now the document class has a single property: 'text'
. It's also stored as a single file
. We want to include attachments, and the easiest way to do that is to create a 'file package' - this means we won't have to read the entire thing into memory, which might be a problem if those attachments are large
. This means we need to use NSFileWrapper

	. An NSFileWrapper is an object that represents either a single file, or a directory of multiple files (each of which can itself be a file wrapper representing a directory)
	. In this app we'll use directory file wrappers; they'll contain at least two files:
		 . A file that contains general info about the document, named "Document.plist"
		 . The .rtfd file containing the text, called "Text.rtfd"
		 . Plus any attached files, which will be kept in a directory called Attachments (so that you can drop files with any name in, including ones named "Document.plist" and "Text.rtf")

. This means we need to implement methods that load from and save to a file wrapper

. Go to project -> Info, scroll down to Document Types, turn on Document is distributed as a bundle

. Implement +readFromFileWrapper+ and +fileWrapperOfType+ (plus related funcs and enums)

. Re-run the app, make a document, save it
. Locate that document in the Finder and right click, choose Show Package Contents - behold, Text.rtf!

==== Adding attachments

. Now we'll add support for actually storing attachments

. First we'll add the collection view
. Resize the text view to make room for the collection view at the bottom
. Add a collection view


. Add a new cocoa class - subclass of NSViewController, turn on create XIB file, name it AddAttachmentViewController

. Open the xib, add a button for File attachments and the label 'Add a new...' above it

. Open the Document xib, add a + button (use a gradient button), attach it to a new method called +addAttachment+; make sure the parameter is of type NSButton and not AnyObject!
. Add a new property: +popover+, optional NSPopover
. Implement addAttachment

. Open AddAttachmentViewController.swift 
. Add the +AddAttachmentDelegate+ protocol
. Add a new property, +delegate+, type: optional +AddAttachmentDelegate+
. Attach the File button to a new method that calls the delegate's +addFile+ method

. Implement +addFile+
. Implement +addAttachmentAtURL+

. Run the app, add an attachment, save the document, view package contents - it's there!


==== Adding support for QuickLook

==== iCloud

. Go to Project Settings, General tab
. Ensure that you've set your Team correctly
. Go to Capabilities tab
. Turn on iCloud, wait for it to load
. Turn on iCloud documents, set Container to "Specify custom containers", add a new container called iCloud.<your bundle ID> - this is to allow your iOS app to access the same container

. Open Info.plist

. Add the following stuff:

----
<key>NSUbiquitousContainers</key>
    <dict>
        <key>iCloud.YOUR.BUNDLE.IDENTIFIER</key>
        <dict>
            <key>NSUbiquitousContainerIsDocumentScopePublic</key>
            <true/>
            <key>NSUbiquitousContainerSupportedFolderLevels</key>
            <string>Any</string>
            <key>NSUbiquitousContainerName</key>
            <string>Notes</string>
        </dict>
    </dict>
----

[NOTE]
====
Run +brctl log --wait --shorten+ in the terminal to get a log of everything iCloud is doing
====

== iOS App

=== Starting up and adding iCloud

. File -> New -> Project, name it Notes-iOS
. Add it to the workspace
. Project settings -> Capabilities
	. Enable iCloud 
	. iCloud documents = on
	. Specify custom containers
	. Use the same container as the one you created for the OS X app

. Open AppDelegate.swift
. Add code that queries +URLForUbiquityContainerIdentifier+

. Open iOS simulator
. Go to Settings->iCloud
. Create a new Apple ID (do NOT use your current one) and sign into it

. Go back to Xcode and run the app; after a few seconds, it will log the location of the container!

=== Listing documents



